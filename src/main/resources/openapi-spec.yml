openapi: 3.0.1
info:
  version: 1.0.0
  title: Spotify Clone
  description: Spotify Clone
  contact:
    email: nknidhi321@gmail.com

tags:
  - name: greetings
    description: greets
    externalDocs:
      description: Find out more about our site
      url: http://swagger.io
  - name: users
    description: User APIs
    externalDocs:
      description: Find out more about our site
      url: http://swagger.io
  - name: songs
    description: Song APIs
    externalDocs:
      description: Find out more about our site
      url: http://swagger.io

paths:
  /users:
    get:
      tags:
        - users
      summary: Fetch all users
      operationId: getUsers
      responses:
        200:
          description: All users
          content:
            application/json:
              schema:
                type: object
                #items:
                  #$ref: '#/components/schemas/User'
        500:
          description: Something Went Wrong
        404:
          description: No Users Found
          content: { }
    post:
      tags:
        - users
      summary: "Add a new user"
      operationId: createUser
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Created User Successfully
          content:
            application/json:
              schema:
                type: object
                #$ref: '#/components/schemas/User'
        500:
          description: Error Creating User
          content: { }

  /users/{userid}:
    get:
      tags:
        - users
      summary: Fetch user
      operationId: getUser
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: User Fetched Successfully
          content:
            application/json:
              schema:
                type: object
                #$ref: '#/components/schemas/User'
        500:
          description: internal server error
          content:
            application/json:
              schema:
                type: string
                example: Internal Server Error
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
                example: Bad Request
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: string
                example: User Not Found

    put:
      tags:
        - users
      summary: "update an existing user"
      operationId: updateUser
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: User Data To Update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                type: object
                #$ref: '#/components/schemas/User'


    delete:
      tags:
        - users
      summary: Delete user
      operationId: removeUser
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Deleted
          content:
            application/json:
              schema:
                type: object
        404:
          description: Blog not found
          content: { }

  /songs:
    get:
      tags:
        - songs
      summary: Fetch All Songs
      operationId: getSongs
      responses:
        200:
          description: All songs
          content:
            application/json:
              schema:
                type: object
        500:
          description: Something Went Wrong
        404:
          description: No Songs Found
          content: { }
    post:
      tags:
        - Songs
      summary: "Add a new song"
      operationId: addSong
      requestBody:
        description: Song Details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
      responses:
        201:
          description: Song Added Successfully
          content:
            application/json:
              schema:
                type: object
                #$ref: '#/components/schemas/Song'
        500:
          description: Error Adding Song
          content: { }

  /songs/{songid}:
    get:
      tags:
        - songs
      summary: Get Song
      operationId: getSong
      parameters:
        - name: songid
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Song Fetched Successfully
          content:
            application/json:
              schema:
                type: object
                #$ref: '#/components/schemas/User'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
                example: Internal Server Error
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
                example: Bad Request
        404:
          description: Song not found
          content:
            application/json:
              schema:
                type: string
                example: Song Not Found

    put:
      tags:
        - songs
      summary: "Update An Existing Song"
      operationId: updateSong
      parameters:
        - name: songid
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Song Data To Update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                type: object
                #$ref: '#/components/schemas/Song'


    delete:
      tags:
        - songs
      summary: Delete song
      operationId: removeSong
      parameters:
        - name: songid
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Deleted
          content:
            application/json:
              schema:
                type: object
        404:
          description: Song Not found
          content: { }

  /roles:
    get:
      tags:
        - roles
      summary: Fetch all roles
      operationId: getRoles
      responses:
        200:
          description: All roles
          content:
            application/json:
              schema:
                type: object
                #items:
                #$ref: '#/components/schemas/Role'
        500:
          description: Something Went Wrong
        404:
          description: No Roles Found
          content: { }
    post:
      tags:
        - roles
      summary: "Add a new role"
      operationId: createRole
      requestBody:
        description: Role details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        201:
          description: Created Role Successfully
          content:
            application/json:
              schema:
                type: object
                #$ref: '#/components/schemas/Role'
        500:
          description: Error Creating Role
          content: { }

  /roles/{roleid}:
    get:
      tags:
        - roles
      summary: Fetch role
      operationId: getRole
      parameters:
        - name: roleid
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Role Fetched Successfully
          content:
            application/json:
              schema:
                type: object
        500:
          description: internal server error
          content:
            application/json:
              schema:
                type: string
                example: Internal Server Error
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
                example: Bad Request
        404:
          description: Role not found
          content:
            application/json:
              schema:
                type: string
                example: Role Not Found

    put:
      tags:
        - roles
      summary: "update an existing role"
      operationId: updateRole
      parameters:
        - name: roleid
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: role Data To Update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                type: object
                #$ref: '#/components/schemas/role'


    delete:
      tags:
        - roles
      summary: Delete role
      operationId: removeRole
      parameters:
        - name: roleid
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Deleted
          content:
            application/json:
              schema:
                type: object
        404:
          description: Role not found
          content: { }


components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        password:
          type: string
        role:
          type: object
          $ref: '#/components/schemas/Role'
        contact_no:
          type: string
        email:
          type: string
          format: email
        dob:
          type: string
          format: date
          example: 2021-06-21
        image:
          type: string

    Role:
      type: object
      properties :
        id:
          type: integer
          format: int64
        role:
          type: string

    Song:
      type: object
      properties :
        id:
          type: integer
          format: int64
        name:
          type: string
        artist:
          type: string
        duration:
          type: integer
          format: int64
        genre:
          type: string
        language:
          type: string
        songUrl :
          type : string
        imageUrl :
          type : string

    Playlist:
      type: object
      properties :
        id :
          type : integer
          format : int64
        name :
          type : string
        totalSongs :
          type : integer
          format : int64
        totalDuration :
          type: integer
          format: int64
        songsId :
          type: array
          items:
            type: integer
            format: int64